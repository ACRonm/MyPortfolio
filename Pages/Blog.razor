@page "/blog"
@using System.Net.Http
@using Markdig
@using MyPortfolio.Services
@using MyPortfolio.Components.BlogPost

@inject ContentService ContentService

<CascadingValue Value="currentPalette">
    <MudContainer>
        <MudGrid>
            @if (GitHubFiles.Count == 0)
            {
                <MudProgressCircular Class="mt-5" Color="Color.Primary" Indeterminate="true" />
            }
            else
            {
                @foreach (var file in GitHubFiles)
                {
                    <BlogpostTeaser TeaserContent="@(new MarkupString(file.Content ?? "Error loading content"))"
                        EditDate="@file.CommitDate" />
                }
            }
        </MudGrid>
    </MudContainer>
</CascadingValue>

@code {
    [CascadingParameter]
    public Palette? currentPalette { get; set; }
    private List<ContentService.GitHubFile> GitHubFiles = new List<ContentService.GitHubFile>();
    private string errorMessage = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        try
        {
            GitHubFiles = await ContentService.LoadContentAsync();

            foreach (var file in GitHubFiles)
            {
                file.Content = Markdown.ToHtml(file.Content);
                file.Content = TruncateText(file.Content, 30);

                file.CommitDate = "Last updated: " + DateTime.Parse(file.CommitDate).ToUniversalTime().AddHours(10).ToString("yyyy/MM/dd HH:mm");
            }

        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }

    }

    public string TruncateText(string text, int length)
    {
        var words = text.Split(' ');
        if (words.Length > length)
        {
            return string.Join(" ", words.Take(length)) + "...";
        }
        else
        {
            return text;
        }
    }
}
