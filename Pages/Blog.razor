@page "/blog"
@using System.Net.Http
@using HtmlAgilityPack
@using Markdig
@using MyPortfolio.Services
@using MyPortfolio.Components.BlogPost

@inject ContentService ContentService



<CascadingValue Value="currentPalette">
	<MudContainer>
		<MudGrid>
			@if (GitHubFiles.Count == 0)
			{
				@for (int i = 0; i < 6; i++)
				{
					<BlogPostTeaserSkeleton />
				}
			}
			else
			{
				@foreach (var file in GitHubFiles)
				{
					<MudItem sm="12" md="6">
						<a>
							<BlogpostTeaser TeaserContent="@(new MarkupString(file.Content ?? "Error loading content"))"
								EditDate="@file.CommitDate" ImageUrl="@file.ImageUrl" Tags="@file.Tags" Title="@file.Name" />
						</a>
					</MudItem>
				}
			}
		</MudGrid>
	</MudContainer>
</CascadingValue>

@code {
	[CascadingParameter]
	public Palette? currentPalette { get; set; }
	private List<ContentService.GitHubFile> GitHubFiles = new List<ContentService.GitHubFile>();
	private string errorMessage = "";
	protected override async Task OnInitializedAsync()
	{
		try
		{
			GitHubFiles = await ContentService.LoadContentAsync();

			foreach (var file in GitHubFiles)
			{
				file.Content = file.Content != null ? Markdown.ToHtml(file.Content) : "Error loading content";

				// Extract teaser content
				file.Content = TruncateText(file.Content, 30);

				if (!string.IsNullOrEmpty(file.CommitDate))
				{
					file.CommitDate = DateTime.Parse(file.CommitDate).ToLocalTime().ToString("MMM dd, yyyy");
				}
				else
				{
					file.CommitDate = "Last updated: Unknown";
				}
			}
		}
		catch (Exception ex)
		{
			errorMessage = ex.Message;
		}
	}

	public string TruncateText(string text, int length)
	{

		var words = text.Split(' ');
		if (words.Length > length)
		{
			return string.Join(" ", words.Take(length)) + "...";
		}
		else
		{
			return text;
		}
	}
}
