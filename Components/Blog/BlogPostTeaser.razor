@page "/blogpostteaser"

@using System.Net.Http
@using System
@using MyPortfolio.Themes

@inject IConfiguration Configuration
@inject HttpClient Http


<div class="blog-post-teaser">
    @if (markdownContent.Count == 0)
    {
        <div class="blog-post-teaser-error">
            @errorMessage
        </div>
    }
    else
    {
        @foreach (var content in markdownContent)
        {
            <MudPaper class="blog-post-teaser-content px-5 py-4 mb-6 rounded-lg" @key="content" @onmouseover="HandleMouseOver"
                @onmouseleave="HandleMouseLeave" Style="@( $"background-color: {backgroundColor};")">
                @((MarkupString)content)
            </MudPaper>
        }
    }
</div>

@code {
    private string? color;
    private string? backgroundColor;
    private List<string> content = new List<string>();
    private string errorMessage = "Loading...";
    private List<string> markdownContent = new List<string>();

    [CascadingParameter]
    public Palette? currentPalette { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var token = Configuration["GitHubToken"];

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Failed to load content. No API token found.";
            return;
        }

        // Add the token to the Authorization header
        Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("token", token);

        var repoApiUrl = "https://api.github.com/repos/ACRonm/MyBlogPosts/contents/My%20Blog%20Posts";

        var response = await Http.GetFromJsonAsync<List<GitHubFile>>(repoApiUrl);

        if (response == null)
        {
            errorMessage = "Failed to load content. No files found.";
            return;
        }

        foreach (var file in response)
        {
            var fileResponse = await Http.GetFromJsonAsync<GitHubFileContent>(file.Url);

            if (fileResponse != null && !string.IsNullOrEmpty(fileResponse.Content))
            {
                var markdown = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(fileResponse.Content));

                markdown = TruncateText(markdown, 50);

                var htmlContent = Markdig.Markdown.ToHtml(markdown);

                markdownContent.Add(htmlContent);

            }
            else
            {
                errorMessage = "Failed to load content. File content is empty.";
            }
        }
    }

    private string TruncateText(string text, int wordLimit)
    {
        if (string.IsNullOrEmpty(text)) return text;

        var words = text.Split(' ');
        if (words.Length <= wordLimit) return text;

        return string.Join(' ', words.Take(wordLimit)) + " ...";
    }

    protected override void OnParametersSet()
    {
        // Ensure the component re-renders when currentPalette changes
        base.OnParametersSet();
        StateHasChanged();

        if (currentPalette != null)
            color = currentPalette.TextPrimary.ToString();

    }

    private void HandleMouseOver()
    {
        if (currentPalette != null)
        {
            color = currentPalette.Primary.ToString();
            backgroundColor = currentPalette.Tertiary.ToString();
        }
    }

    private void HandleMouseLeave()
    {
        if (currentPalette != null)
        {
            color = currentPalette.TextPrimary.ToString();
            backgroundColor = "rgba(45,40,38,0)";
        }
    }

    private class GitHubFile
    {
        public string? Name { get; set; }
        public string? Url { get; set; }
    }

    private class GitHubFileContent
    {
        public string? Content { get; set; }
    }

}