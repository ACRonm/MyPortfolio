@page "/blogpostteaser"

@using System.Net.Http
@using System
@using MyPortfolio.Themes

@inject IConfiguration Configuration
@inject HttpClient Http


<div class="blog-post-teaser">
    @foreach (var content in markdownContents)
    {
        <div class="blog-post-teaser__content" @key="content">
            @((MarkupString)content)
        </div>
    }
</div>

@code {

    private string errorMessage = "Loading...";
    private string? markdownContent;
    private List<string> markdownContents = new List<string>();

    [CascadingParameter]
    public Palette? currentPalette { get; set; }
    protected override async Task OnInitializedAsync()
    {
        var token = Environment.GetEnvironmentVariable("GITHUB_TOKEN");

        if (string.IsNullOrEmpty(token))
        {
            errorMessage = "Failed to load content. No API token found.";
        }
        try
        {
            // Add the token to the Authorization header
            Http.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("token", token);
            Http.DefaultRequestHeaders.UserAgent.ParseAdd("request");

            var repoApiUrl = "https://api.github.com/repos/ACRonm/MyBlogPosts/contents/My%20Blog%20Posts";

            var response = await Http.GetFromJsonAsync<List<GitHubFile>>(repoApiUrl);

            if (response == null)
            {
                errorMessage = "Failed to load content. No file found.";
                return;
            }

            foreach (var file in response)
            {
                var fileResponse = await Http.GetFromJsonAsync<GitHubFileContent>(file.Url);

                var markdown = System.Text.Encoding.UTF8.GetString(Convert.FromBase64String(fileResponse.Content));

                Console.WriteLine("Markdown: " + markdown);

                var htmlContent = Markdig.Markdown.ToHtml(markdown);
                markdownContents.Add(htmlContent);
            }
        }
        catch (HttpRequestException)
        {
            errorMessage = "Failed to load content. No file found.";
        }
    }

    private string TruncateText(string text, int wordLimit)
    {
        if (string.IsNullOrEmpty(text)) return text;

        var words = text.Split(' ');
        if (words.Length <= wordLimit) return text;

        return string.Join(' ', words.Take(wordLimit)) + " ...";
    }

    private class GitHubFile
    {
        public string? Name { get; set; }
        public string? Url { get; set; }
    }

    private class GitHubFileContent
    {
        public string? Content { get; set; }
    }

}