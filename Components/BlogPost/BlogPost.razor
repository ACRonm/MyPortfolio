@using MyPortfolio.Services
@using System.Net.Http.Json
@using HtmlAgilityPack;
@using Microsoft.JSInterop;
@using Microsoft.AspNetCore.Components

@inject ContentService ContentService
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

@page "/blogpost/{name}"

<PageTitle>@(Post?.Title ?? "Blog Post") - My Portfolio</PageTitle>
<HeadContent>
	@if (Post != null)
	{
		<meta name="description" content="@GetMetaDescription(Post.Content)" />
		<meta property="og:title" content="@Post.Title" />
		<meta property="og:description" content="@GetMetaDescription(Post.Content)" />
		<meta property="og:image" content="@Post.ImageUrl" />
		<meta name="keywords" content="@string.Join(", ", Post.Tags ?? new List<string>())" />
	}
</HeadContent>

<link href="css/app.css" rel="stylesheet" />

<MudContainer MaxWidth="MaxWidth.Medium">
	<MudGrid>
		<MudItem xs="12" sm="12" md="12">
			@if (Post != null)
			{
				<MudText Typo="Typo.h1" style="font-weight: 900;">@Post.Title</MudText>
				<div>
					<div style="display: flex; justify-content: space-between; align-items: center;">
						<MudText Typo="Typo.body2">@Post.CommitDate</MudText>
						<MudDivider Class="mx-2" style="width: 50px;" />
						<MudAvatar Style="vertical-align: middle;">
							<MudImage Src="images/profile-picture.webp" Alt="My profile picture" />
						</MudAvatar>
					</div>
				</div>
				@foreach (var tag in Post.Tags!)
				{
					<MudChip T="string" Variant="Variant.Text" Color="Color.Secondary" class="mb-3">@tag</MudChip>
				}
				<MudText Typo="Typo.body1">@((MarkupString)(Post.Content ?? ""))</MudText>
				<MudText>Share this post:</MudText>
				<div class="d-flex gap-2 mt-2">
					<MudIconButton Icon="@Icons.Custom.Brands.Twitter" OnClick="@(() => ShareOn("twitter"))" />
					<MudIconButton Icon="@Icons.Custom.Brands.LinkedIn" OnClick="@(() => ShareOn("linkedin"))" />
					<MudIconButton Icon="@Icons.Material.Filled.Link" OnClick="@CopyLink" />
				</div>
			}
			else
			{
				<MudProgressCircular Class="mt-5 justify-center" Color="Color.Primary" Indeterminate="true" />
			}
		</MudItem>
	</MudGrid>
	<MudItem xs="12" sm="12" md="12">
		<MudButton Href="/blog" typo="typo.Button" Variant="Variant.Outlined" Color="Color.Primary"
			Class="my-5 rounded-pill">
			<MudIcon Icon="@Icons.Material.Filled.ArrowBack" Color="Color.Primary" Size="Size.Small" />
			Back
		</MudButton>
	</MudItem>
</MudContainer>

<style>
	p>img {
		padding-top: 15px;
		padding-bottom: 15px;
		max-width: 100%;
		height: auto;
	}

	a {
		position: relative;
		display: inline-block;
	}

	a::after {
		content: '';
		position: absolute;
		width: 0;
		height: 2px;
		bottom: 0;
		left: 0;
		background-color: currentColor;
		transition: width 0.25s ease-out;
	}

	a:hover::after {
		width: 100%;
	}

	p {
		margin-bottom: 0.5rem;
		margin-top: 0.5rem;
	}

	ul {
		margin-left: 1rem;
		list-style-type: disc;
		/* Bullets for unordered lists */
	}

	ol {
		list-style-type: decimal;
		/* Numbers for ordered lists */
	}
</style>

@code {

	[Parameter]
	public string Name { get; set; } = "";
	public ContentService.GitHubFile? Post;
	private readonly HttpClient Http = new HttpClient();
	[Inject] private IJSRuntime JS { get; set; } = default!;

	protected override async Task OnInitializedAsync()
	{

		Post = await Http.GetFromJsonAsync<ContentService.GitHubFile>($"{ContentService.baseApiUrl}/blogpost/{Name}.md") ?? new
		ContentService.GitHubFile();

		if (Post != null)
		{
			Post.Content = Post.Content != null ? ContentService.ParseMarkdownToHtml(Post.Content) : "Error loading content";

			var doc = new HtmlDocument();
			doc.LoadHtml(Post.Content);

			if (!string.IsNullOrEmpty(Post.CommitDate))
			{
				Post.CommitDate = DateTime.Parse(Post.CommitDate).ToLocalTime().ToString("MMM dd, yyyy");
			}

			ContentService.ExtractTags(Post, doc);
		}
		else
		{
			Post = new ContentService.GitHubFile();
		}
	}

	private string GetMetaDescription(string? content)
	{
		if (string.IsNullOrEmpty(content)) return "";
		return string.Join(" ", content.Split(' ').Take(30)) + "...";
	}

	private async Task ShareOn(string platform)
	{
		var url = NavigationManager.Uri;
		var title = Post?.Title ?? "";

		var shareUrl = platform switch
		{
			"twitter" => $"https://twitter.com/intent/tweet?text={Uri.EscapeDataString(title)}&url={Uri.EscapeDataString(url)}",
			"linkedin" => $"https://www.linkedin.com/sharing/share-offsite/?url={Uri.EscapeDataString(url)}",
			_ => ""
		};

		await JS.InvokeVoidAsync("open", shareUrl, "_blank");
	}

	private async Task CopyLink()
	{
		await JS.InvokeVoidAsync("navigator.clipboard.writeText", NavigationManager.Uri);
		Snackbar.Add("Link copied to clipboard!", Severity.Success);
	}
}