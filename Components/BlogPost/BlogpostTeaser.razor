@page "/BlogpostTeaser"

@using System.Net.Http
@using System
@using MyPortfolio.Themes
@using MyPortfolio.Services

@inject IConfiguration Configuration
@inject HttpClient Http
@inject ContentService ContentService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar


<MudCard Outlined="true" class="rounded-xl" Style="@($"background-color: {backgroundColor}; height:100%;")"
	Elevation="4">
	<MudCardMedia Image="@ImageUrl" Height="250" />
	<MudCardHeader>
		<CardHeaderContent>
			<MudText Style="font-weight: 400;" Typo="Typo.h2">@Title</MudText>
			<div style="display: flex; align-items: center; gap: 16px;">
				<span style="display: inline-flex; align-items: center;" class="pt-2">
					<MudIcon Icon="@Icons.Material.TwoTone.Edit" Title="Last edited" />
					<MudText Typo="Typo.body2" style="margin-left: 8px;">@EditDate</MudText>
				</span>
				<span style="display: inline-flex; align-items: center;" class="pt-2">
					<MudIcon Icon="@Icons.Material.Filled.Timer" Title="Reading time" />
					<MudText Typo="Typo.body2" style="margin-left: 8px;">@ReadingTime min read</MudText>
				</span>
			</div>
		</CardHeaderContent>
	</MudCardHeader>
	<MudCardContent style="">
		<MudText Typo="Typo.body2">@TeaserContent</MudText>
	</MudCardContent>
	<a href="/blogpost/@Title" class="pl-5">
		<MudText class="grow-on-hover" Typo="Typo.button" Color="Color.Primary">Read more...</MudText>
	</a>
	<MudCardActions>
		<div>
			<MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" @onclick=HandleShare>
			</MudIconButton>
		</div>

		<MudChipSet T="string" SelectionMode="SelectionMode.MultiSelection">
		@if (Tags != null)
		{
			@foreach (var tag in Tags)
			{
					<MudChip T="string" Variant="Variant.Text" Color="Color.Secondary">@tag</MudChip>
			}
		}
		</MudChipSet>
	</MudCardActions>
</MudCard>

<style>
	.grow-on-hover {
		position: relative;
		display: inline-block;
	}

	.grow-on-hover::after {
		content: '';
		position: absolute;
		width: 0;
		height: 2px;
		bottom: 0;
		left: 0;
		background-color: currentColor;
		transition: width 0.25s ease-out;
	}

	.grow-on-hover:hover::after {
		width: 100%;
	}
</style>

@code {
	private string? color;
	private string? backgroundColor;
	[Parameter]
	public List<string>? Tags { get; set; }
	[Parameter]
	public string? ImageUrl { get; set; }
	[Parameter]
	public string? Title { get; set; } = "Title";
	[Parameter]
	public string? EditDate { get; set; }
	[Parameter]
	public MarkupString TeaserContent { get; set; }
	[Parameter]
	public int ReadingTime { get; set; }
	[CascadingParameter]
	public Palette? currentPalette { get; set; }


	protected override void OnParametersSet()
	{
		// Ensure the component re-renders when currentPalette changes
		base.OnParametersSet();
		StateHasChanged();


		color = currentPalette?.TextPrimary.ToString();
		backgroundColor = currentPalette?.Tertiary.ToString();

		// Calculate reading time based on content length (average reading speed: 200 words/minute)
		ReadingTime = Math.Max(1, TeaserContent.Value.Split(' ').Length / 200);
	}

	private async Task HandleShare()
	{
		string baseUrl = NavigationManager.BaseUri + "blogpost/";

		await JSRuntime.InvokeVoidAsync("shareContent", Title, "Check out this post.", baseUrl + Title);

		var result = await JSRuntime.InvokeAsync<bool>("shareContent", Title, "Check out this post.", baseUrl + Title);

		Console.WriteLine(result);

		if (result == false)
		{
			// copy to clipboard instead
			await JSRuntime.InvokeVoidAsync("copyToClipboard", baseUrl + Title);

			Snackbar.Add("Link copied to clipboard.", Severity.Info);
		}

	}

}