@page "/BlogpostTeaser"

@using System.Net.Http
@using System
@using MyPortfolio.Themes
@using MyPortfolio.Services

@inject IConfiguration Configuration
@inject HttpClient Http
@inject ContentService ContentService

<MudItem sm="6" md="6">
    <MudCard class="rounded-lg" Style="@($"background-color: {backgroundColor}; height:100%;")">
        <MudCardHeader>
            <CardHeaderAvatar>
                <MudAvatar Color="Color.Secondary">I</MudAvatar>
            </CardHeaderAvatar>
            <CardHeaderContent>
                <MudText Typo="Typo.body1">@Title</MudText>
                <MudText Typo="Typo.body2">@EditDate</MudText>
            </CardHeaderContent>
            <CardHeaderActions>
                <MudIconButton Icon="@Icons.Material.Filled.Settings" Color="Color.Default" />
            </CardHeaderActions>
        </MudCardHeader>
        <MudCardMedia Image="images/me.avif" Height="250" />
        <MudCardContent style="">
            <MudText Typo="Typo.body2">@TeaserContent</MudText>
        </MudCardContent>
        <MudCardActions>
            <MudIconButton Icon="@Icons.Material.Filled.Favorite" Color="Color.Default" />
            <MudIconButton Icon="@Icons.Material.Filled.Share" Color="Color.Default" />
        </MudCardActions>
    </MudCard>
</MudItem>



@code {
    private string? color;
    private string? backgroundColor;
    [Parameter]
    public string? Title { get; set; } = "Title";
    [Parameter]
    public string? EditDate { get; set; }
    [Parameter]
    public MarkupString TeaserContent { get; set; }
    [CascadingParameter]
    public Palette? currentPalette { get; set; }

    protected override void OnParametersSet()
    {
        // Ensure the component re-renders when currentPalette changes
        base.OnParametersSet();
        StateHasChanged();


        color = currentPalette?.TextPrimary.ToString();
        backgroundColor = currentPalette?.Tertiary.ToString();

    }

}