@page "/ExperienceCards"
@using System.Diagnostics.Tracing

@inject MudTheme CustomTheme

<div class="experience-cards">
    <MudPaper id="card1" class="experience-card rounded-lg px-5 py-4 mb-6" @onmouseover="HandleMouseOver"
        @onmouseleave="HandleMouseLeave" Style="@( $"background-color: {backgroundColor};")">
        <a href="@Url" target="_blank">
            <MudGrid>
                <MudItem xs="3" class="experience-card-date">
                    <MudText>
                        @DateRange
                    </MudText>
                </MudItem>
                <MudItem xs="9">
                    <MudText class="experience-card-header" Style="@($"color: {color};")">
                        @Title
                    </MudText>
                    <MudText class="experience-card-info">
                        <MudText class="mb-3">@Description</MudText>
                        @foreach (var skill in Skills)
                        {
                            <MudChip T="string" Variant="Variant.Text" Color="Color.Primary">@skill</MudChip>
                        }
                    </MudText>
                </MudItem>
            </MudGrid>
            <MudIcon Icon="@Icons.Material.Filled.ArrowOutward" Size="Size.Small" Class="experience-card-icon"
                Style="@( $"color: {color}; " )" />
        </a>
    </MudPaper>
</div>

@code {
    private bool _isDarkMode;
    private string? color;
    private string? backgroundColor;

    [Parameter]
    public string Url { get; set; } = string.Empty;

    [Parameter]
    public string DateRange { get; set; } = string.Empty;

    [Parameter]
    public string Title { get; set; } = string.Empty;

    [Parameter]
    public string Description { get; set; } = string.Empty;

    [Parameter]
    public List<string> Skills { get; set; } = new List<string>();

    [CascadingParameter]
    public bool IsDarkMode
    {
        get => _isDarkMode;
        set
        {
            if (_isDarkMode != value)
            {
                _isDarkMode = value;
                UpdateColor();
            }
        }
    }

    private void HandleMouseOver()
    {
        var palette = GetPalette();
        color = palette.Primary.ToString();
        backgroundColor = palette.Tertiary.ToString();
    }

    private void HandleMouseLeave()
    {
        var palette = GetPalette();
        color = palette.TextPrimary.ToString();
        backgroundColor = "rgba(45,40,38,0)";
    }

    private void UpdateColor()
    {
        var palette = GetPalette();
        color = palette.TextPrimary.ToString();
        backgroundColor = null;
    }

    private Palette GetPalette()
    {
        return _isDarkMode ? CustomTheme.PaletteDark : CustomTheme.PaletteLight;
    }
}